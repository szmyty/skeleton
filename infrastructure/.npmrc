enable-pre-post-scripts=true

###################################################
# PNPM Configuration Settings
###################################################

# hoist
# When true, all dependencies are hoisted to node_modules/.pnpm/node_modules.
# This makes unlisted dependencies accessible to all packages inside node_modules.
# Default: true
# Type: Boolean
# Reference: https://pnpm.io/npmrc#hoist
hoist=true

# hoist-workspace-packages
# When true, packages from the workspaces are symlinked to either
# <workspace_root>/node_modules/.pnpm/node_modules or to <workspace_root>/node_modules
# depending on other hoisting settings (hoist-pattern and public-hoist-pattern).
# Default: true
# Type: Boolean
# Reference: https://pnpm.io/npmrc#hoist-workspace-packages
hoist-workspace-packages=true

# hoist-pattern
# Tells pnpm which packages should be hoisted to node_modules/.pnpm/node_modules.
# By default, all packages are hoisted.
# Default: ['*']
# Type: String[]
# Reference: https://pnpm.io/npmrc#hoist-pattern
hoist-pattern=["*"]

# public-hoist-pattern
# Unlike hoist-pattern, which hoists dependencies to a hidden modules directory
# inside the virtual store, public-hoist-pattern hoists dependencies matching
# the pattern to the root modules directory.
# Default: ['*eslint*', '*prettier*']
# Type: String[]
# Reference: https://pnpm.io/npmrc#public-hoist-pattern
public-hoist-pattern=["*eslint*", "*prettier*"]

# shamefully-hoist
# By default, pnpm creates a semistrict node_modules, meaning dependencies have
# access to undeclared dependencies but modules outside of node_modules do not.
# Default: false
# Type: Boolean
# Reference: https://pnpm.io/npmrc#shamefully-hoist
shamefully-hoist=false

# modules-dir
# The directory in which dependencies will be installed (instead of node_modules).
# Default: node_modules
# Type: Path
# Reference: https://pnpm.io/npmrc#modules-dir
# modules-dir=.cache/node_modules

# node-linker
# Defines what linker should be used for installing Node packages.
# Default: isolated
# Type: isolated, hoisted, pnp
# Reference: https://pnpm.io/npmrc#node-linker
node-linker=isolated

# symlink
# When symlink is set to false, pnpm creates a virtual store directory without any symlinks.
# Default: true
# Type: Boolean
# Reference: https://pnpm.io/npmrc#symlink
symlink=true

# enable-modules-dir
# When false, pnpm will not write any files to the modules directory (node_modules).
# Default: true
# Type: Boolean
# Reference: https://pnpm.io/npmrc#enable-modules-dir
enable-modules-dir=true

# virtual-store-dir
# The directory with links to the store. All direct and indirect dependencies
# of the project are linked into this directory.
# Default: node_modules/.pnpm
# Type: Path
# Reference: https://pnpm.io/npmrc#virtual-store-dir
virtual-store-dir=node_modules/.pnpm

# virtual-store-dir-max-length
# Sets the maximum allowed length of directory names inside the virtual store directory (node_modules/.pnpm).
# Default: 120
# Type: Number
# Reference: https://pnpm.io/npmrc#virtual-store-dir-max-length
virtual-store-dir-max-length=120

# package-import-method
# Controls the way packages are imported from the store.
# Default: auto
# Type: auto, hardlink, copy, clone, clone-or-copy
# Reference: https://pnpm.io/npmrc#package-import-method
package-import-method=auto

# modules-cache-max-age
# The time in minutes after which orphan packages from the modules directory should be removed.
# Default: 10080 (7 days in minutes)
# Type: Number
# Reference: https://pnpm.io/npmrc#modules-cache-max-age
modules-cache-max-age=10080

# dlx-cache-max-age
# The time in minutes after which dlx cache expires.
# Default: 1440 (1 day in minutes)
# Type: Number
# Reference: https://pnpm.io/npmrc#dlx-cache-max-age
dlx-cache-max-age=1440

# store-dir
# The location where all the packages are saved on the disk.
# Default:
# If the $PNPM_HOME env variable is set, then $PNPM_HOME/store
# If the $XDG_DATA_HOME env variable is set, then $XDG_DATA_HOME/pnpm/store
# On Windows: ~/AppData/Local/pnpm/store
# On macOS: ~/Library/pnpm/store
# On Linux: ~/.local/share/pnpm/store
# Type: Path
# Reference: https://pnpm.io/npmrc#store-dir
store-dir=node_modules/.pnpm-store

# verify-store-integrity
# If verify-store-integrity is set to false, files in the content-addressable
# store will not be checked during installation.
# Default: true
# Type: Boolean
# Reference: https://pnpm.io/npmrc#verify-store-integrity
verify-store-integrity=true

# use-running-store-server
# Only allows installation with a store server. If no store server is running, installation will fail.
# Default: false
# Type: Boolean
# Reference: https://pnpm.io/npmrc#use-running-store-server
use-running-store-server=false

# strict-store-pkg-content-check
# Some registries allow the exact same content to be published under different package names and/or versions.
# Default: true
# Type: Boolean
# Reference: https://pnpm.io/npmrc#strict-store-pkg-content-check
strict-store-pkg-content-check=true

# lockfile
# When set to false, pnpm won't read or generate a pnpm-lock.yaml file.
# Default: true
# Type: Boolean
# Reference: https://pnpm.io/npmrc#lockfile
lockfile=true

# prefer-frozen-lockfile
# When set to true and the available pnpm-lock.yaml satisfies the package.json dependencies directive,
# a headless installation is performed.
# Default: true
# Type: Boolean
# Reference: https://pnpm.io/npmrc#prefer-frozen-lockfile
prefer-frozen-lockfile=true

# lockfile-include-tarball-url
# Add the full URL to the package's tarball to every entry in pnpm-lock.yaml.
# Default: true
# Type: Boolean
# Reference: https://pnpm.io/npmrc#lockfile-include-tarball-url
lockfile-include-tarball-url=true

# git-branch-lockfile
# When set to true, the generated lockfile name after installation will be named based on the current branch name
# to completely avoid merge conflicts.
# Default: false
# Type: Boolean
# Reference: https://pnpm.io/npmrc#git-branch-lockfile
git-branch-lockfile=false

# merge-git-branch-lockfiles-branch-pattern
# This configuration matches the current branch name to determine whether to merge all git branch lockfile files.
# Default: null
# Type: Array or null
# Reference: https://pnpm.io/npmrc#merge-git-branch-lockfiles-branch-pattern
# merge-git-branch-lockfiles-branch-pattern=null

# peers-suffix-max-length
# Max length of the peer IDs suffix added to dependency keys in the lockfile.
# Default: 1000
# Type: Number
# Reference: https://pnpm.io/npmrc#peers-suffix-max-length
peers-suffix-max-length=1000

# <scope>:registry
# The npm registry that should be used for packages of the specified scope.
# Default:
# Type: String
# Reference: https://pnpm.io/npmrc#scope-registry
# scope:registry=""

# <URL>:_authToken
# Define the authentication bearer token to use when accessing the specified registry.
# Default:
# Type: String
# Reference: https://pnpm.io/npmrc#url-_authtoken
# URL:_authToken=""

# <URL>:tokenHelper
# A token helper is an executable which outputs an auth token.
# This can be used in situations where the authToken is not a constant value but is something that refreshes regularly.
# Default:
# Type: Path
# Reference: https://pnpm.io/npmrc#url-tokenhelper
# URL:tokenHelper=""

# <URL>:cafile
# Define the path to a Certificate Authority file to use when accessing the specified registry.
# Default:
# Type: Path
# Reference: https://pnpm.io/npmrc#url-cafile
# URL:cafile=null

# <URL>:certfile
# Define the path to a certificate file to use when accessing the specified registry.
# Default:
# Type: Path
# Reference: https://pnpm.io/npmrc#url-certfile
# URL:certfile=null

# <URL>:keyfile
# Define the path to a client key file to use when accessing the specified registry.
# Default:
# Type: Path
# Reference: https://pnpm.io/npmrc#url-keyfile
# URL:keyfile=null

# git-shallow-hosts
# When fetching dependencies that are Git repositories, if the host is listed in this setting,
# pnpm will use shallow cloning to fetch only the needed commit, not all the history.
# Default: ['github.com', 'gist.github.com', 'gitlab.com', 'bitbucket.com', 'bitbucket.org']
# Type: string[]
# Reference: https://pnpm.io/npmrc#git-shallow-hosts
git-shallow-hosts=['github.com', 'gist.github.com', 'gitlab.com', 'bitbucket.com', 'bitbucket.org']

# network-concurrency
# Controls the maximum number of HTTP(S) requests to process simultaneously.
# Default: 16
# Type: Number
# Reference: https://pnpm.io/npmrc#network-concurrency
network-concurrency=16

# auto-install-peers
# When true, any missing non-optional peer dependencies are automatically installed.
# Default: true
# Type: Boolean
# Reference: https://pnpm.io/npmrc#auto-install-peers
auto-install-peers=true

# dedupe-peer-dependents
# When this setting is set to true, packages with peer dependencies will be deduplicated after peers resolution.
# Default: true
# Type: Boolean
# Reference: https://pnpm.io/npmrc#dedupe-peer-dependents
dedupe-peer-dependents=true

# strict-peer-dependencies
# If this is enabled, commands will fail if there is a missing or invalid peer dependency in the tree.
# Default: false
# Type: Boolean
# Reference: https://pnpm.io/npmrc#strict-peer-dependencies
strict-peer-dependencies=false

# resolve-peers-from-workspace-root
# When enabled, dependencies of the root workspace project are used to resolve peer dependencies of any projects in the workspace.
# Default: true
# Type: Boolean
# Reference: https://pnpm.io/npmrc#resolve-peers-from-workspace-root
resolve-peers-from-workspace-root=true

# use-beta-cli
# Experimental option that enables beta features of the CLI.
# Default: false
# Type: Boolean
# Reference: https://pnpm.io/npmrc#use-beta-cli
use-beta-cli=false

# recursive-install
# If this is enabled, the primary behavior of pnpm install becomes that of pnpm install -r.
# Default: true
# Type: Boolean
# Reference: https://pnpm.io/npmrc#recursive-install
recursive-install=true

# npm-path
# The location of the npm binary that pnpm uses for some actions, like publishing.
# Default:
# Type: path
# Reference: https://pnpm.io/npmrc#npm-path
# npm-path=null

# package-manager-strict
# If this setting is disabled, pnpm will not fail if a different package manager is specified in the packageManager field of package.json.
# Default: true
# Type: Boolean
# Reference: https://pnpm.io/npmrc#package-manager-strict
package-manager-strict=true

# package-manager-strict-version
# When enabled, pnpm will fail if its version doesn't exactly match the version specified in the packageManager field of package.json.
# Default: false
# Type: Boolean
# Reference: https://pnpm.io/npmrc#package-manager-strict-version
package-manager-strict-version=true

# manage-package-manager-versions
# When enabled, pnpm will automatically download and run the version of pnpm specified in the packageManager field of package.json.
# Default: false
# Type: Boolean
# Reference: https://pnpm.io/npmrc#manage-package-manager-versions
manage-package-manager-versions=true

# ignore-dep-scripts
# Do not execute any scripts of the installed packages. Scripts of the projects are executed.
# Default: false
# Type: Boolean
# Reference: https://pnpm.io/npmrc#ignore-dep-scripts
ignore-dep-scripts=false

# child-concurrency
# The maximum number of child processes to allocate simultaneously to build node_modules.
# Default: 5
# Type: Number
# Reference: https://pnpm.io/npmrc#child-concurrency
child-concurrency=5

# side-effects-cache
# Use and cache the results of (pre/post)install hooks.
# Default: true
# Type: Boolean
# Reference: https://pnpm.io/npmrc#side-effects-cache
side-effects-cache=true

# side-effects-cache-readonly
# Only use the side effects cache if present, do not create it for new packages.
# Default: false
# Type: Boolean
# Reference: https://pnpm.io/npmrc#side-effects-cache-readonly
side-effects-cache-readonly=false

# unsafe-perm
# Set to true to enable UID/GID switching when running package scripts.
# Default: false IF running as root, ELSE true
# Type: Boolean
# Reference: https://pnpm.io/npmrc#unsafe-perm
unsafe-perm=false

# use-node-version
# Specifies which exact Node.js version should be used for the project's runtime.
# Default: undefined
# Type: semver
# Reference: https://pnpm.io/npmrc#use-node-version
# use-node-version=20.17.0

# node-version
# The Node.js version to use when checking a package's engines setting.
# Default: the value returned by node -v, without the v prefix
# Type: semver
# Reference: https://pnpm.io/npmrc#node-version
# node-version=20.17.0

# node-mirror:<releaseDir>
# Sets the base URL for downloading Node.js.
# Default: https://nodejs.org/download/<releaseDir>/
# Type: URL
# Reference: https://pnpm.io/npmrc#node-mirror-releasedir
# node-mirror:<releaseDir>=https://nodejs.org/download/<releaseDir>/

# link-workspace-packages
# If this is enabled, locally available packages are linked to node_modules instead of being downloaded from the registry.
# Default: false
# Type: true, false, deep
# Reference: https://pnpm.io/npmrc#link-workspace-packages
link-workspace-packages=false

# prefer-workspace-packages
# If this is enabled, local packages from the workspace are preferred over packages from the registry.
# Default: false
# Type: Boolean
# Reference: https://pnpm.io/npmrc#prefer-workspace-packages
prefer-workspace-packages=false

# shared-workspace-lockfile
# If this is enabled, pnpm creates a single pnpm-lock.yaml file in the root of the workspace.
# Default: true
# Type: Boolean
# Reference: https://pnpm.io/npmrc#shared-workspace-lockfile
shared-workspace-lockfile=true

# save-workspace-protocol
# Controls how dependencies that are linked from the workspace are added to package.json.
# Default: rolling
# Type: true, false, rolling
# Reference: https://pnpm.io/npmrc#save-workspace-protocol
save-workspace-protocol=rolling

# ignore-workspace-cycles
# When set to true, no workspace cycle warnings will be printed.
# Default: false
# Type: Boolean
# Reference: https://pnpm.io/npmrc#ignore-workspace-cycles
ignore-workspace-cycles=false

# disallow-workspace-cycles
# When set to true, installation will fail if the workspace has cycles.
# Default: false
# Type: Boolean
# Reference: https://pnpm.io/npmrc#disallow-workspace-cycles
disallow-workspace-cycles=false

# global-dir
# Specify a custom directory to store global packages.
# Default:
# Type: path
# Reference: https://pnpm.io/npmrc#global-dir
# global-dir=null

# global-bin-dir
# Allows to set the target directory for the bin files of globally installed packages.
# Default:
# Type: path
# Reference: https://pnpm.io/npmrc#global-bin-dir
# global-bin-dir=null

# state-dir
# The directory where pnpm creates the pnpm-state.json file that is currently used only by the update checker.
# Default:
# Type: path
# Reference: https://pnpm.io/npmrc#state-dir
state-dir=node_modules/.pnpm-state

# cache-dir
# The location of the cache (package metadata and dlx).
# Default:
# Type: path
# Reference: https://pnpm.io/npmrc#cache-dir
cache-dir=node_modules/.pnpm-cache

# use-stderr
# When true, all the output is written to stderr.
# Default: false
# Type: Boolean
# Reference: https://pnpm.io/npmrc#use-stderr
use-stderr=false

# prefer-symlinked-executables
# Create symlinks to executables in node_modules/.bin instead of command shims.
# Default: true, when node-linker is set to hoisted and the system is POSIX
# Type: Boolean
# Reference: https://pnpm.io/npmrc#prefer-symlinked-executables
prefer-symlinked-executables=true

# ignore-compatibility-db
# During installation, the dependencies of some packages are automatically patched.
# If you want to disable this, set this config to false.
# Default: false
# Type: Boolean
# Reference: https://pnpm.io/npmrc#ignore-compatibility-db
ignore-compatibility-db=false

# resolution-mode
# When resolution-mode is set to time-based, dependencies will be resolved according to the selected mode.
# Default: highest
# Type: highest, time-based, lowest-direct
# Reference: https://pnpm.io/npmrc#resolution-mode
resolution-mode=highest

# registry-supports-time-field
# Set this to true if the registry that you are using returns the "time" field in the abbreviated metadata.
# Default: false
# Type: Boolean
# Reference: https://pnpm.io/npmrc#registry-supports-time-field
registry-supports-time-field=false

# extend-node-path
# When false, the NODE_PATH environment variable is not set in the command shims.
# Default: true
# Type: Boolean
# Reference: https://pnpm.io/npmrc#extend-node-path
extend-node-path=true

# deploy-all-files
# When deploying a package or installing a local package, all files of the package are copied.
# Default: false
# Type: Boolean
# Reference: https://pnpm.io/npmrc#deploy-all-files
deploy-all-files=false

# dedupe-direct-deps
# When set to true, dependencies that are already symlinked to the root node_modules directory of the workspace will not be symlinked to subproject node_modules directories.
# Default: false
# Type: Boolean
# Reference: https://pnpm.io/npmrc#dedupe-direct-deps
dedupe-direct-deps=false

# dedupe-injected-deps
# When this setting is enabled, dependencies that are injected will be symlinked from the workspace whenever possible.
# Default: true
# Type: Boolean
# Reference: https://pnpm.io/npmrc#dedupe-injected-deps
dedupe-injected-deps=true
